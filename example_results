ansible 2.1.0 (devel d5446f9804) last updated 2015/12/04 15:23:52 (GMT +000)
  lib/ansible/modules/core: (detached HEAD cd9a7667aa) last updated 2015/12/04 15:24:03 (GMT +000)
  lib/ansible/modules/extras: (detached HEAD 3c4f954f0f) last updated 2015/12/04 15:24:03 (GMT +000)
  config file = /home/PRLSS/tbutler/.ansible.cfg
  configured module search path = Default w/o overrides
####################################################################
# TEST host variable is set from a single static inventory
#
CHECK: host_m var_x
::::::::::::::
  ./inventories/single_static_dir/1_static_one
::::::::::::::
[group_a]
host_m var_x="static_one_amx"

== ADHOC ==
check for variable var_x
host_m | SUCCESS => {
    "changed": false, 
    "var_x": "static_one_amx"
}
check for hostvars['host_m'].var_x:
host_m | SUCCESS => {
    "changed": false, 
    "hostvars['host_m'].var_x": "static_one_amx"
}
check that var == hostvars[host].var
host_m | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}
check that var == expected: static_one_amx
host_m | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}

== PLAYBOOK ==

PLAY [Dump and compare a host variable's value with that in hostvars and what is expected] ***

TASK [variable value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "var_x": "static_one_amx"
}

TASK [hostvars variable value] *************************************************
ok: [host_m] => {
    "changed": false, 
    "hostvars['host_m'].var_x": "static_one_amx"
}

TASK [expected value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "expected": "static_one_amx"
}

TASK [expected value checked] **************************************************
ok: [host_m]

TASK [hostvars value agrees with var] ******************************************
ok: [host_m]

PLAY RECAP *********************************************************************
host_m                     : ok=5    changed=0    unreachable=0    failed=0   

####################################################################
# TEST host variables are merged between multiple static inventories
# Apparently merging happened in 1.9.4, but not in 2.0b3
CHECK: host_m var_x
::::::::::::::
  ./inventories/double_static_dir/1_static_one
::::::::::::::
[group_a]
host_m var_x="static_one_amx"
::::::::::::::
  ./inventories/double_static_dir/2_static_two
::::::::::::::
[group_a]
host_m var_y="static_two_amy"

== ADHOC ==
check for variable var_x
host_m | SUCCESS => {
    "changed": false, 
    "var_x": "static_one_amx"
}
check for hostvars['host_m'].var_x:
host_m | SUCCESS => {
    "changed": false, 
    "hostvars['host_m'].var_x": "static_one_amx"
}
check that var == hostvars[host].var
host_m | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}
check that var == expected: static_one_amx
host_m | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}

== PLAYBOOK ==

PLAY [Dump and compare a host variable's value with that in hostvars and what is expected] ***

TASK [variable value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "var_x": "static_one_amx"
}

TASK [hostvars variable value] *************************************************
ok: [host_m] => {
    "changed": false, 
    "hostvars['host_m'].var_x": "static_one_amx"
}

TASK [expected value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "expected": "static_one_amx"
}

TASK [expected value checked] **************************************************
ok: [host_m]

TASK [hostvars value agrees with var] ******************************************
ok: [host_m]

PLAY RECAP *********************************************************************
host_m                     : ok=5    changed=0    unreachable=0    failed=0   

CHECK: host_m var_y
::::::::::::::
  ./inventories/double_static_dir/1_static_one
::::::::::::::
[group_a]
host_m var_x="static_one_amx"
::::::::::::::
  ./inventories/double_static_dir/2_static_two
::::::::::::::
[group_a]
host_m var_y="static_two_amy"

== ADHOC ==
check for variable var_y
host_m | SUCCESS => {
    "changed": false, 
    "var_y": "static_two_amy"
}
check for hostvars['host_m'].var_y:
host_m | SUCCESS => {
    "changed": false, 
    "hostvars['host_m'].var_y": "static_two_amy"
}
check that var == hostvars[host].var
host_m | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}
check that var == expected: static_two_amy
host_m | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}

== PLAYBOOK ==

PLAY [Dump and compare a host variable's value with that in hostvars and what is expected] ***

TASK [variable value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "var_y": "static_two_amy"
}

TASK [hostvars variable value] *************************************************
ok: [host_m] => {
    "changed": false, 
    "hostvars['host_m'].var_y": "static_two_amy"
}

TASK [expected value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "expected": "static_two_amy"
}

TASK [expected value checked] **************************************************
ok: [host_m]

TASK [hostvars value agrees with var] ******************************************
ok: [host_m]

PLAY RECAP *********************************************************************
host_m                     : ok=5    changed=0    unreachable=0    failed=0   

####################################################################
# TEST colliding host variables are set from the first lexically sorted inventory file processed - static inventories only -- but really the host variables come from the inventory that defined the 'lexically last' group a host is in. In this case, adding group_b with host_n as a member changes the variables from host_n.
#
CHECK: host_m var_x
::::::::::::::
  ./inventories/double_static_collision_dir/1_static_one
::::::::::::::
[group_a]
host_m var_x="static_one_amx"
host_n var_x="static_one_anx"
::::::::::::::
  ./inventories/double_static_collision_dir/2_static_two
::::::::::::::
[group_a]
host_m var_x="static_two_amx"

[group_b]
# host_n is here to demonstrate that the inventory host used for vars
# depends not on the order of inventory files, but on the order of groups
# a host is in.
host_n

== ADHOC ==
check for variable var_x
host_m | SUCCESS => {
    "changed": false, 
    "var_x": "static_two_amx"
}
check for hostvars['host_m'].var_x:
host_m | SUCCESS => {
    "changed": false, 
    "hostvars['host_m'].var_x": "static_two_amx"
}
check that var == hostvars[host].var
host_m | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}
check that var == expected: static_one_amx
host_m | FAILED! => {
    "assertion": "var_x=='static_one_amx'", 
    "changed": false, 
    "evaluated_to": false, 
    "failed": true
}

== PLAYBOOK ==

PLAY [Dump and compare a host variable's value with that in hostvars and what is expected] ***

TASK [variable value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "var_x": "static_two_amx"
}

TASK [hostvars variable value] *************************************************
ok: [host_m] => {
    "changed": false, 
    "hostvars['host_m'].var_x": "static_two_amx"
}

TASK [expected value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "expected": "static_one_amx"
}

TASK [expected value checked] **************************************************
fatal: [host_m]: FAILED! => {"assertion": "var_x == expected", "changed": false, "evaluated_to": false, "failed": true}

PLAY RECAP *********************************************************************
host_m                     : ok=3    changed=0    unreachable=0    failed=1   

CHECK: host_n var_x
::::::::::::::
  ./inventories/double_static_collision_dir/1_static_one
::::::::::::::
[group_a]
host_m var_x="static_one_amx"
host_n var_x="static_one_anx"
::::::::::::::
  ./inventories/double_static_collision_dir/2_static_two
::::::::::::::
[group_a]
host_m var_x="static_two_amx"

[group_b]
# host_n is here to demonstrate that the inventory host used for vars
# depends not on the order of inventory files, but on the order of groups
# a host is in.
host_n

== ADHOC ==
check for variable var_x
host_n | SUCCESS => {
    "changed": false, 
    "var_x": "static_one_anx"
}
check for hostvars['host_n'].var_x:
host_n | SUCCESS => {
    "changed": false, 
    "hostvars['host_n'].var_x": "static_one_anx"
}
check that var == hostvars[host].var
host_n | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}
check that var == expected: static_one_anx
host_n | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}

== PLAYBOOK ==

PLAY [Dump and compare a host variable's value with that in hostvars and what is expected] ***

TASK [variable value] **********************************************************
ok: [host_n] => {
    "changed": false, 
    "var_x": "VARIABLE IS NOT DEFINED!"
}

TASK [hostvars variable value] *************************************************
ok: [host_n] => {
    "changed": false, 
    "hostvars['host_n'].var_x": "static_one_anx"
}

TASK [expected value] **********************************************************
ok: [host_n] => {
    "changed": false, 
    "expected": "static_one_anx"
}

TASK [expected value checked] **************************************************
fatal: [host_n]: FAILED! => {"failed": true, "msg": "ERROR! The conditional check 'var_x == expected' failed. The error was: ERROR! error while evaluating conditional: var_x == expected ({% if var_x == expected %} True {% else %} False {% endif %})"}

PLAY RECAP *********************************************************************
host_n                     : ok=3    changed=0    unreachable=0    failed=1   

####################################################################
# TEST Single dynamic inventory
#
CHECK: host_m var_x
::::::::::::::
  ./inventories/single_dynamic_dir/1_dynamic_one
::::::::::::::
#!/usr/bin/env dynamic_json
{
 "_meta": {
  "hostvars": {
   "host_m": {
    "var_x": "dynamic_one_mx"
   }
  }
 },
 "group_b": [ "host_m" ]
}

== ADHOC ==
check for variable var_x
host_m | SUCCESS => {
    "changed": false, 
    "var_x": "dynamic_one_mx"
}
check for hostvars['host_m'].var_x:
host_m | SUCCESS => {
    "changed": false, 
    "hostvars['host_m'].var_x": "dynamic_one_mx"
}
check that var == hostvars[host].var
host_m | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}
check that var == expected: dynamic_one_mx
host_m | SUCCESS => {
    "changed": false, 
    "msg": "all assertions passed"
}

== PLAYBOOK ==

PLAY [Dump and compare a host variable's value with that in hostvars and what is expected] ***

TASK [variable value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "var_x": "dynamic_one_mx"
}

TASK [hostvars variable value] *************************************************
ok: [host_m] => {
    "changed": false, 
    "hostvars['host_m'].var_x": "dynamic_one_mx"
}

TASK [expected value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "expected": "dynamic_one_mx"
}

TASK [expected value checked] **************************************************
ok: [host_m]

TASK [hostvars value agrees with var] ******************************************
ok: [host_m]

PLAY RECAP *********************************************************************
host_m                     : ok=5    changed=0    unreachable=0    failed=0   

####################################################################
# TEST You can't group dynamic hosts into static groups without losing their variables.
# The mention of host_m in the static file is treated as a new host definition
# whose empty variable set takes precedence over the dynamic inventory for adhoc.
# But also note that the hostvars[varname] does get set based on the dynamic inventory.
# ansible-playbook works but adhoc does not.
#
CHECK: host_m var_x
::::::::::::::
  ./inventories/dynamic_static_dir_collision_dir/1_dynamic_one
::::::::::::::
#!/usr/bin/env dynamic_json
{
 "_meta": {
  "hostvars": {
   "host_m": {
    "var_x": "dynamic_one_mx"
   }
  }
 },
 "group_0": [ "host_m" ]
}
::::::::::::::
  ./inventories/dynamic_static_dir_collision_dir/2_static_one
::::::::::::::
[group_a]
host_m

== ADHOC ==
check for variable var_x
host_m | SUCCESS => {
    "changed": false, 
    "var_x": "VARIABLE IS NOT DEFINED!"
}
check for hostvars['host_m'].var_x:
host_m | FAILED! => {
    "failed": true, 
    "msg": "ERROR! 'dict object' has no attribute 'var_x'"
}
check that var == hostvars[host].var
host_m | FAILED! => {
    "failed": true, 
    "msg": "ERROR! The conditional check 'var_x==hostvars['host_m'].var_x' failed. The error was: ERROR! error while evaluating conditional: var_x==hostvars['host_m'].var_x ({% if var_x==hostvars['host_m'].var_x %} True {% else %} False {% endif %})"
}
check that var == expected: dynamic_one_mx
host_m | FAILED! => {
    "failed": true, 
    "msg": "ERROR! The conditional check 'var_x=='dynamic_one_mx'' failed. The error was: ERROR! error while evaluating conditional: var_x=='dynamic_one_mx' ({% if var_x=='dynamic_one_mx' %} True {% else %} False {% endif %})"
}

== PLAYBOOK ==

PLAY [Dump and compare a host variable's value with that in hostvars and what is expected] ***

TASK [variable value] **********************************************************
ok: [host_m] => {
    "changed": false, 
    "var_x": "dynamic_one_mx"
}

TASK [hostvars variable value] *************************************************
fatal: [host_m]: FAILED! => {"failed": true, "msg": "ERROR! 'dict object' has no attribute 'var_x'"}

PLAY RECAP *********************************************************************
host_m                     : ok=1    changed=0    unreachable=0    failed=1   

